@page "/EventManagePage"
@using AdminWeb.Components.Pages.Modals
@using AdminWeb.Services
@using DbContext.SharedContext.DbResultModel
@using ServerFramework.CommonUtils.DateTimeHelper
@inject EventInfoService EventInfoService

<Grid TItem="EventDbResult"
      @ref="_grid"
      Class="table table-hover table-bordered table-striped"
      DataProvider="EventDbDataProvider"
      AllowPaging="true"
      Responsive="true"
      PageSize="20"
      Unit="Unit.Px">
    <GridColumns>
        <GridColumn TItem="EventDbResult" HeaderText="Id" PropertyName="event_id">@context.event_id</GridColumn>
        <GridColumn TItem="EventDbResult" HeaderText="Type" PropertyName="event_type">@context.event_type_id</GridColumn>
        <GridColumn TItem="EventDbResult" HeaderText=@_startDateHeader PropertyName="event_start_date">@context.StartDateUtc.ToServerTime()</GridColumn>
        <GridColumn TItem="EventDbResult" HeaderText=@_endDateHeader PropertyName="event_end_date">@context.EndDateUtc.ToServerTime()</GridColumn>
        <GridColumn TItem="EventDbResult" HeaderText=@_expiryDateHeader PropertyName="event_expiry_date">@context.ExpireDateUtc.ToServerTime()</GridColumn>
    </GridColumns>
</Grid>

<div class="d-grid gap-2 d-md-block mt-2">
    <Button Class="btn btn-primary" Size="ButtonSize.Small" @onclick="_OnClickButton">Create Event</Button>
</div>

<CreateGameEventModal @ref="_modal" OnCreateResult="OnCreateResult"></CreateGameEventModal>

@code {
    private string _timeZone;
    private string _startDateHeader;
    private string _endDateHeader;
    private string _expiryDateHeader;

    protected override async Task OnInitializedAsync()
    {
        _timeZone = TimeZoneHelper.CurrentTimeZone.DisplayName;
        _startDateHeader = $"Start Date ({_timeZone})";
        _endDateHeader = $"End Date ({_timeZone})";
        _expiryDateHeader = $"Expiry Date ({_timeZone})";
        
        await base.OnInitializedAsync();
    }

    private async Task<GridDataProviderResult<EventDbResult>> EventDbDataProvider(GridDataProviderRequest<EventDbResult> request)
    {
        var eventList = EventInfoService.GetRegisteredEvents();
        return await Task.FromResult(request.ApplyTo(eventList));
    }
}